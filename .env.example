# Blue Mountains Shale Mining Communities Project
# Environment Configuration Template
#
# SECURITY NOTICE:
# This file is a template. Copy it to .env and fill in your actual credentials.
# NEVER commit .env to version control - it contains sensitive API keys!
#
# Setup Instructions:
# 1. Copy this file: cp .env.example .env
# 2. Edit .env with your API credentials
# 3. Verify .env is in .gitignore (it should be by default)

# ==============================================================================
# ZOTERO API CONFIGURATION
# ==============================================================================

# Zotero Group Library ID
# This is the Blue Mountains project Zotero group library
# Group URL: https://www.zotero.org/groups/2258643
ZOTERO_GROUP_ID=2258643

# Zotero API Keys (Principle of Least Privilege)
# Generate separate keys at: https://www.zotero.org/settings/keys
#
# BEST PRACTICE: Use separate keys for read-only and read-write operations
# This follows the "principle of least privilege" security model
#
# Read-Only Key: For extraction and analysis scripts (01-03)
# Required Permissions:
# - "Allow library access" → Read Only
# - Select group library: Blue Mountains Shale Mining Communities (2258643)
#
# Benefits: If compromised, cannot modify or delete library data
ZOTERO_API_KEY_READONLY=your_readonly_key_here
#
# Read-Write Key: For future vocabulary publishing scripts
# Required Permissions:
# - "Allow library access" → Read/Write
# - Select group library: Blue Mountains Shale Mining Communities (2258643)
#
# Use only when scripts need to modify the library (write tags, update items)
ZOTERO_API_KEY_READWRITE=your_readwrite_key_here
#
# Legacy API Key (Optional - for backward compatibility)
# If you only have one key, put it here and omit the specific keys above
# The scripts will use this as a fallback
# ZOTERO_API_KEY=your_api_key_here

# Zotero Library Type
# Options: 'group' or 'user'
# For this project, always use 'group'
ZOTERO_LIBRARY_TYPE=group


# ==============================================================================
# OMEKA CLASSIC API CONFIGURATION (for future use in Phase 4)
# ==============================================================================

# Omeka Classic Base URL
# Example: https://bluemountains.omeka.net/api
# This will be configured when publishing to Omeka Classic
# OMEKA_API_URL=https://your-omeka-instance.org/api

# Omeka Classic API Key
# Generate in Omeka admin panel: Settings > API
# Required for creating and updating items via API
# OMEKA_API_KEY=your_omeka_api_key_here


# ==============================================================================
# OPTIONAL: RESEARCH VOCABULARIES AUSTRALIA (RVA)
# ==============================================================================

# RVA API endpoint (if using automated publishing)
# Documentation: https://vocabs.ardc.edu.au/
# RVA_API_URL=https://vocabs.ardc.edu.au/api/

# RVA API credentials (if required for your vocabulary)
# RVA_API_KEY=your_rva_api_key_here


# ==============================================================================
# OPTIONAL: GETTY VOCABULARIES
# ==============================================================================

# Getty AAT (Art & Architecture Thesaurus) and TGN (Thesaurus of Geographic Names)
# are accessed via public SPARQL endpoint, no API key required
# Endpoint: http://vocab.getty.edu/sparql
#
# No configuration needed - included here for documentation completeness


# ==============================================================================
# OPTIONAL: LOGGING AND DEBUGGING
# ==============================================================================

# Logging level
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Default: INFO (if not specified)
# LOG_LEVEL=INFO

# Enable verbose output for debugging
# Options: True, False
# Default: False
# DEBUG_MODE=False


# ==============================================================================
# NOTES FOR DEVELOPERS
# ==============================================================================

# Environment Variable Loading:
# The scripts/config.py file loads these variables using python-dotenv.
# It validates that required variables (ZOTERO_*) are present.
#
# Adding New Variables:
# 1. Add the variable definition here in .env.example (with documentation)
# 2. Update scripts/config.py to load and validate the variable
# 3. Document the variable in docs/configuration.md (when created)
#
# Security Best Practices:
# - Never hardcode API keys in scripts
# - Never commit .env to Git (already in .gitignore)
# - Regenerate keys if accidentally exposed
# - Use read-only keys when write access isn't needed
# - Consider using separate keys for development and production
#
# Troubleshooting:
# - If "Zotero credentials not found" error occurs:
#   1. Verify .env file exists in project root
#   2. Check that .env contains ZOTERO_GROUP_ID and ZOTERO_API_KEY
#   3. Ensure no extra spaces around variable names or values
#   4. Try running: python scripts/config.py to test configuration loading
